Poj1936 - All in All
Problem：判断一个字符串去掉一些字符后能不能变成另一个字符串。
Method：greedy
Solve：用两个指针分别指向两个字符串，根据目标串向后移动指针。

Poj2408 - Anagram Groups
Problem：将给定字符串组按规则进行输出。
Method：sort

Poj2359 - Questions
Problem：给定长度为n（下标[0...n - 1]）的字符串，从下标为0的字符开始数，数到k就删除该字符，然后从下个字符数，求最后剩下的单个字符。
Method：dynamic programming
Solve：dp[n][k]表示长度为n的串数到k删除字符，最后得到单个字符在原串中的下标。我们考虑序列，开始为{0、1、2、3...n - 1}，然后我们删除第k个字符，它的下标为x = (k - 1) % n，它的下一个的下标为y = k % n，删除后得到序列{0、1、2、3...y - 2、y、y + 1...n - 1}，我们把它转化成{y、y + 1...n - 1、0、1、2...y - 2}，再转化成{0、1、2...n - 2}，变成了长度为n - 1的串的相同问题，可以用dp[n - 1][k]表示，我们考虑下标变换，逆着回去，序列4变成序列3需要index’ = (index + y) % n = (index + k % n) % n = (index + k) % n，所以有dp[n][k] = (dp[n - 1][k] + k) % n。并且dp[1][k] = 0。

Poj1750 - Dictionary
Problem：将给定字符串组按规则输出。
Method：simulattion

Poj2752 - Seek the Name, Seek the Fame
Problem：求对于一个字符串满足前n个字符等于后n个字符的n有哪些。
Method：kmp，recursion
Solve：用kmp求出p[]，然后递归求解。

Poj1961 - Period
Problem：给定一个字符串，问它的每个前缀是否能够被表示成A ^ k（k > = 2），其中A表示1个字符串，k表示A重复k次。
Method：kmp
Solve：用kmp求出p[]。字符串S[0...|S| - 1]的最小循环节为|S| - 1 - p[|S| - 1]（不考虑最后一节）。有上述定理知，如果|S| % (minimum loop length) == 0，可以用A ^ k（k >= 2）表示字符串S。

Poj1147 - Binary codes
Problem：N位的二进制串连续N次循环移位，得到N个二进制串。对其按照字典序排列，得到一个N * N的矩阵。告诉矩阵最后一列，求矩阵第一行。
Method：recursion，sort
Solve：把最后一列移到第一列后，从新稳定排序，矩阵不变，可以得到原矩阵的第一列，以此递推出每一列。

Poj3261 - Milk Patterns
Problem：给定一个字符串，求至少出现k次的最长重复子串，这k个子串可以重叠。
Method：suffix array
Solve：先二分答案，把问题变成判定性问题。然后将后缀分成若干组，判断有没有一个组的后缀个数不小于k。如果有，那么存在k个相同的子串满足条件，否则不存在。求后缀数组的方法（doubling）：见论文以及ftiasch的代码。
Thesis：罗穗骞《后缀数组――处理字符串的有力工具》

Poj2185 - Milking Grid
Problem：给出一个字母构成的矩阵，求一个最小的矩形子串，使得该子串可以复制构成整个矩阵（构成时子串不可以重叠，但是右边界和下边界可以由多余出来的部分）。
Method：kmp，2D
Solve：字符串S[0...|S| - 1]的最小循环节为|S| - 1 - p[|S| - 1]（不考虑最后一节）。首先用kmp对每行求出最小循环节，把宽取为r个最小循环节的最小公倍数，然后把每行的前wide子串当做一个整体，再用kmp纵向求最小循环节得到height。

Poj3349 - Snowflake Snow Snowflakes
Problem：给一组雪花（雪花由6个脚的长度表示，），判断是否存在雪花同构。
Method：hash
Solve：首先根据雪花6个脚的长度和模上一个素数将雪花进行分组，然后在每组内判断是否存在雪花同构。

Poj3167 - Cow Patterns
Problem：给定一个模式串，如果在主串中存在这样一个子串：子串长度与模式串长度相同，且子串中各个数字的大、小、同关系和模式串中的大、小、同关系是一样的，就称该子串与模式串匹配。给定主串和模式串，求能与模式串匹配的子串的位置。
Method：kmp，binary indexed tree
Solve：两个串匹配当且仅当在每个位置上的元素前面等于它的个数和小于它的个数都对应相等。根据这个性质，我们用两个数组lessCount[]，equalCount[]记录各个位置上的小于array[]的个数和等于array[]的个数，先求出模式串的这两个数组，然后用kmp求p[]，在求的过程中用binary indexed tree动态维护当前后缀的lessCount和equalCount并且根据这两个进行匹配。然后用kmp匹配主串和模式串，匹配过程与求模式串的p[]过程类似。

Poj2774 - Long Long Message
Problem：求两个串的最长公共字串。
Method：suffix array
Solve：字符串的任何一个子串都是这个字符串的某个后缀的前缀，求两个字符串的最长公共子串等价于求两个字符串的后缀的最长公共前缀的最大值。我们将一个字符串拼接在另一个的后面，中间用一个没有出现过的字符隔开，再求这个新的字符串的后缀数组，再求出height[]，height[i]满足suffix(sa[i - 1])和suffix(sa[i])不是同一个字符串的两个后缀时的最大值即为结果。
Thesis：罗穗骞《后缀数组――处理字符串的有力工具》
